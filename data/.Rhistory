# Clear memory and console
cat("\014")
#Clear memory
rm(list=ls())
gc()
# Install/load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, dbplyr, tidyverse, googlesheets, googledrive, rstudioapi, stringi, openxlsx, tidyr)
# VPN connection needed to for database
shell.exec("C:/Github/R Scripts/LaunchVPN.bat")
# Connect to database
con <- DBI::dbConnect(RPostgres::Postgres(),
host = "core-dw-auroradbcluster-1ww3inpfq2lza.cluster-ro-cafefwp0yh2u.us-east-2.rds.amazonaws.com",
port = 5432,
dbname = "dashboarding",
user = "rff_jstewart",
password = rstudioapi::askForPassword("Password for rff_jstewart:"),
sslmode = "require")
# Query database
# --------------------------------------------
df_enrollment_attendance <- tbl(con, "ftbl_obs_stu_enrollment") %>%
# only CSCE records
filter(k_school == 4972) %>%
# join school info
left_join(tbl(con, "dtbl_school"),
by = "k_school",
suffix = c("",".y")) %>%
# join student annual info
left_join(tbl(con,"dtbl_student_annual"),
by = "k_student_annual",
suffix = c("",".y")) %>%
# join attendance data
left_join(tbl(con,"ftbl_obs_stu_annual_attendance"),
by = "k_student_annual",
suffix = c("",".y")) %>%
# create census day enrollment flag
mutate(enrollment_start_date = as.Date(enrollment_start_date),
enrollment_exit_date = as.Date(enrollment_exit_date),
enrolled_census = case_when(
enrollment_start_date <= as.Date("2014-10-01") & enrollment_exit_date >= as.Date("2014-10-01") ~ "Y",
enrollment_start_date <= as.Date("2015-10-07") & enrollment_exit_date >= as.Date("2015-10-07") ~ "Y",
enrollment_start_date <= as.Date("2016-10-05") & enrollment_exit_date >= as.Date("2016-10-05") ~ "Y",
enrollment_start_date <= as.Date("2017-10-04") & enrollment_exit_date >= as.Date("2017-10-04") ~ "Y",
enrollment_start_date <= as.Date("2018-10-03") & enrollment_exit_date >= as.Date("2018-10-03") ~ "Y",
TRUE ~ "N"),
enrolled_june = case_when(
k_schoolyear == 2015 & enrollment_exit_date >= as.Date("2015-06-01") ~ "Y",
k_schoolyear == 2016 & enrollment_exit_date >= as.Date("2016-06-01") ~ "Y",
k_schoolyear == 2017 & enrollment_exit_date >= as.Date("2017-06-01") ~ "Y",
k_schoolyear == 2018 & enrollment_exit_date >= as.Date("2018-06-01") ~ "Y",
k_schoolyear == 2019 & enrollment_exit_date >= as.Date("2019-06-01") ~ "Y",
TRUE ~ "N")) %>%
# select columns
select(k_schoolyear,
school_name,
state_student_id,
enrollment_start_date,
enrollment_exit_date,
enrolled_census,
enrolled_june,
grade_level_code,
membership_days,
absences_days,
attendance_days) %>%
#
arrange(state_student_id, k_schoolyear) %>%
# save results to data frame
collect()
df_test <- df_enrollment_attendance %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census, order_by = k_schoolyear)) %>%
select(k_schoolyear,
state_student_id,
enrolled_census,
enrolled_june,
enrolled_census_next_year)
View(df_test)
df_test <- df_enrollment_attendance %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
select(k_schoolyear,
state_student_id,
enrolled_census,
enrolled_june,
enrolled_census_next_year)
df_test <- df_enrollment_attendance %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
1,
0)) %>%
select(k_schoolyear,
state_student_id,
enrolled_census,
enrolled_june,
enrolled_census_next_year,
retention_flag)
df_test <- df_enrollment_attendance %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
select(k_schoolyear,
state_student_id,
enrolled_census,
enrolled_june,
enrolled_census_next_year,
retention_flag)
df_test <- df_enrollment_attendance %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
mutate(row_count = row_number(order_by = k_schoolyear)) %>%
select(k_schoolyear,
state_student_id,
enrolled_census,
enrolled_june,
enrolled_census_next_year,
retention_flag)
df_test <- df_enrollment_attendance %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
arrange(state_student_id, k_schoolyear) %>%
mutate(row_count = row_number()) %>%
select(k_schoolyear,
state_student_id,
enrolled_census,
enrolled_june,
enrolled_census_next_year,
retention_flag,
row_count)
df_test <- df_enrollment_attendance %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
arrange(state_student_id, k_schoolyear) %>%
mutate(row_count = row_number()) %>%
mutate(max_row_count = max(row_count)) %>%
select(k_schoolyear,
state_student_id,
enrolled_census,
enrolled_june,
enrolled_census_next_year,
retention_flag,
row_count,
max_row_count)
df_test <- df_enrollment_attendance %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
arrange(state_student_id, k_schoolyear) %>%
mutate(row_count = row_number()) %>%
mutate(years_at_school = max(row_count)) %>%
select(k_schoolyear,
state_student_id,
enrolled_census,
enrolled_june,
enrolled_census_next_year,
retention_flag,
row_count,
years_at_school)
df_test <- df_enrollment_attendance %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
arrange(state_student_id, k_schoolyear) %>%
mutate(row_count = row_number()) %>%
mutate(total_years_at_school = max(row_count)) %>%
select(k_schoolyear,
state_student_id,
enrolled_census,
enrolled_june,
enrolled_census_next_year,
retention_flag,
row_count,
total_years_at_school)
df_test <- df_enrollment_attendance %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
arrange(state_student_id, k_schoolyear) %>%
mutate(row_count = row_number()) %>%
mutate(total_years_at_school = max(row_count)) %>%
select(k_schoolyear,
state_student_id,
retention_flag,
row_count,
total_years_at_school,
membership_days,
absences_days,
attendance_days)
write.xlsx(df_enrollment_attendance
, "C://Data/csce_enrollment_attendance.xlsx")
write.xlsx(df_test
, "C://Data/csce_enrollment_attendance.xlsx")
View(df_enrollment_attendance)
df_test <- df_enrollment_attendance %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
arrange(state_student_id, k_schoolyear) %>%
mutate(row_count = row_number()) %>%
mutate(total_years_at_school = max(row_count)) %>%
select(k_schoolyear,
state_student_id,
grade_level_code,
retention_flag,
row_count,
total_years_at_school,
membership_days,
absences_days,
attendance_days)
write.xlsx(df_test
, "C://Data/csce_enrollment_attendance.xlsx")
df_test <- df_enrollment_attendance %>%
#Remove PS grade level records
filter(grade_level_code != "PS") %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
arrange(state_student_id, k_schoolyear) %>%
mutate(row_count = row_number()) %>%
mutate(total_years_at_school = max(row_count)) %>%
select(k_schoolyear,
state_student_id,
grade_level_code,
retention_flag,
row_count,
total_years_at_school,
membership_days,
absences_days,
attendance_days)
df_test <- df_enrollment_attendance %>%
#Remove PS grade level records
filter(grade_level_code != "PS") %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
arrange(state_student_id, k_schoolyear) %>%
mutate(row_count = row_number()) %>%
mutate(total_years_at_school = max(row_count),
last_grade_level = max(grade_level_code)) %>%
select(k_schoolyear,
state_student_id,
grade_level_code,
last_grade_level,
retention_flag,
row_count,
total_years_at_school,
membership_days,
absences_days,
attendance_days)
df_test <- df_enrollment_attendance %>%
#Remove PS grade level records
filter(grade_level_code != "PS") %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
arrange(state_student_id, k_schoolyear) %>%
mutate(row_count = row_number(),
total_years_at_school = max(row_count),
last_grade_level = max(grade_level_code),
attendance_rate = absences_days / membership_days) %>%
select(k_schoolyear,
state_student_id,
grade_level_code,
last_grade_level,
retention_flag,
row_count,
total_years_at_school,
membership_days,
absences_days,
attendance_days)
df_test <- df_enrollment_attendance %>%
#Remove PS grade level records
filter(grade_level_code != "PS") %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
arrange(state_student_id, k_schoolyear) %>%
mutate(row_count = row_number(),
total_years_at_school = max(row_count),
last_grade_level = max(grade_level_code),
attendance_rate = absences_days / membership_days) %>%
select(k_schoolyear,
state_student_id,
grade_level_code,
last_grade_level,
retention_flag,
row_count,
total_years_at_school,
membership_days,
absences_days,
attendance_days,
attendance_rate)
df_test <- df_enrollment_attendance %>%
#Remove PS grade level records
filter(grade_level_code != "PS") %>%
group_by(state_student_id) %>%
mutate(enrolled_census_next_year = lead(enrolled_census,
order_by = k_schoolyear,
default = "N")) %>%
mutate(retention_flag = ifelse(enrolled_june == "Y" & enrolled_census_next_year == "Y",
"Y",
"N")) %>%
arrange(state_student_id, k_schoolyear) %>%
mutate(row_count = row_number(),
total_years_at_school = max(row_count),
last_grade_level = max(grade_level_code),
attendance_rate = attendance_days / membership_days) %>%
select(k_schoolyear,
state_student_id,
grade_level_code,
last_grade_level,
retention_flag,
row_count,
total_years_at_school,
membership_days,
absences_days,
attendance_days,
attendance_rate)
install.packages(c("bit", "callr", "cdata", "digest", "dplyr"))
install.packages(c("digest", "jsonlite", "knitr", "mime", "processx"))
install.packages(c("digest", "ps", "RcppArmadillo", "rlang", "RSelenium"))
install.packages(c("tidyselect", "vctrs", "wdman", "xlsx", "yaml"))
install.packages(c("digest", "ps", "rstudioapi", "stringi", "tidyr", "xlsx"))
install.packages(c("digest", "ps", "stringi", "xlsx"))
# Import California Department of Education (CDE) enrollment data files
#
# Date files and file specification available here: https://www.cde.ca.gov/ds/sd/sd/filesenr.asp
#
# This script will work for enrollment files from 2007-08 school year and later
#
# This script imports enrollment data files from individual school years and combines them into a single data frame
# Install/load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, tidyr, dplyr)
# Set working directory
setwd("C:/Github/SimilarSchoolComparison/Data/Enrollment")
# Create list to store data frames
l_dataframes <- list()
# List of files in the working folder
l_files <- dir()
# Import each file into a data frame
for (i in 1:length(l_files)) {
l_dataframes[[i]] <- l_files[i] %>%
# Import file
read.csv(header = TRUE
, sep = "\t"
, colClasses = c(rep("character", 6)
, rep("integer", 17))) %>%
# Parse school year from file name
mutate(FILE_NAME = l_files[i])
}
# Create single data frame
df_enr <- bind_rows(l_dataframes)
# Clean up
rm(i, l_dataframes, l_files)
gc()
# Add variables
df_test <- df_enr %>%
# Add school year variable
mutate(School_Year_2digit = as.numeric(substring(FILE_NAME, 4, 5)),
SCHOOL_YEAR = paste0(School_Year_2digit,
"-",
School_Year_2digit + 1)) %>%
# Drop file name
dplyr::select(-FILE_NAME, -School_Year_2digit) %>%
# Add ethnic text variable
mutate(ETHNIC_TXT = case_when(
ETHNIC == "0" ~ "Not Reported"
, ETHNIC == "1" ~ "American Indian or Alaska Native"
, ETHNIC == "2" ~ "Asian"
, ETHNIC == "3" ~ "Pacific Islander"
, ETHNIC == "4" ~ "Filipino"
, ETHNIC == "5" ~ "Hispanic or Latino"
, ETHNIC == "6" ~ "African American"
, ETHNIC == "7" ~ "White"
, ETHNIC == "9" ~ "Two or More Races"))
View(df_test)
# Import California Department of Education (CDE) enrollment data files
#
# Date files and file specification available here: https://www.cde.ca.gov/ds/sd/sd/filesenr.asp
#
# This script will work for enrollment files from 2007-08 school year and later
#
# This script imports enrollment data files from individual school years and combines them into a single data frame
# Install/load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, tidyr, dplyr)
# Set working directory
setwd("C:/Github/SimilarSchoolComparison/Data/Enrollment")
# Create list to store data frames
l_dataframes <- list()
# List of files in the working folder
l_files <- dir()
# Import each file into a data frame
for (i in 1:length(l_files)) {
l_dataframes[[i]] <- l_files[i] %>%
# Import file
read.csv(header = TRUE
, sep = "\t"
, colClasses = c(rep("character", 6)
, rep("integer", 17))) %>%
# Parse school year from file name
mutate(FILE_NAME = l_files[i])
}
# Create single data frame
df_enr <- bind_rows(l_dataframes)
# Clean up
rm(i, l_dataframes, l_files)
gc()
rm(df_test)
View(df_enr)
df_enr_long <- df_enr %>%
pivot_longer(KDGN:ADULT, names_to = "GRADE_SPAN")
View(df_enr_long)
df_enr_long <- df_enr %>%
pivot_longer(KDGN:ADULT, names_to = "GRADE_SPAN", values_to = "COUNT")
View(df_enr_long)
View(df_enr_long)
View(df_enr_long)
df_enr_long <- df_enr %>%
pivot_longer(KDGN:ADULT, names_to = "GRADE_SPAN", values_to = "COUNT") %>%
# Add ethnic text variable
mutate(ETHNIC_TXT = case_when(
ETHNIC == "0" ~ "Not Reported"
, ETHNIC == "1" ~ "American Indian or Alaska Native"
, ETHNIC == "2" ~ "Asian"
, ETHNIC == "3" ~ "Pacific Islander"
, ETHNIC == "4" ~ "Filipino"
, ETHNIC == "5" ~ "Hispanic or Latino"
, ETHNIC == "6" ~ "African American"
, ETHNIC == "7" ~ "White"
, ETHNIC == "9" ~ "Two or More Races"),
School_Year_2digit = as.numeric(substring(FILE_NAME, 4, 5)),
SCHOOL_YEAR = paste0(School_Year_2digit,
"-",
School_Year_2digit + 1)) %>%
# Drop file name
dplyr::select(-FILE_NAME, -School_Year_2digit) %>%
df_enr_long <- df_enr %>%
pivot_longer(KDGN:ADULT, names_to = "GRADE_SPAN", values_to = "COUNT") %>%
# Add ethnic text variable
mutate(ETHNIC_TXT = case_when(
ETHNIC == "0" ~ "Not Reported"
, ETHNIC == "1" ~ "American Indian or Alaska Native"
, ETHNIC == "2" ~ "Asian"
, ETHNIC == "3" ~ "Pacific Islander"
, ETHNIC == "4" ~ "Filipino"
, ETHNIC == "5" ~ "Hispanic or Latino"
, ETHNIC == "6" ~ "African American"
, ETHNIC == "7" ~ "White"
, ETHNIC == "9" ~ "Two or More Races"),
School_Year_2digit = as.numeric(substring(FILE_NAME, 4, 5)),
SCHOOL_YEAR = paste0(School_Year_2digit,
"-",
School_Year_2digit + 1)) %>%
# Drop file name
dplyr::select(-FILE_NAME, -School_Year_2digit)
